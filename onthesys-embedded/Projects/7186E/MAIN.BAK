#include "..\..\LIB\7186e.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define WM300V_COM COM1
#define BAUD_RATE 115200
#define PDU_UD_SENSOR "3E30310D"
#define PDU_UD_OK     "3E30320D"
#define RESPONSE_OK   "3E79750D"
#define ERR_SHOW_INVALID_PDU 101
#define ERR_SHOW_SEND_FAIL    102
#define ERR_SHOW_MODEM_FAIL   103
#define ERR_SHOW_INTERNAL     199

float sensor_values[8] = { 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8 };
char sensor_timeout[8] = { 'T','T','T','T','T','T','T','T' };

void ShowError(int code) {
    Init5DigitLed();
    Show5DigitLed(0, code / 10000 % 10);
    Show5DigitLed(1, code / 1000 % 10);
    Show5DigitLed(2, code / 100 % 10);
    Show5DigitLed(3, code / 10 % 10);
    Show5DigitLed(4, code % 10);
    LedOn();
}

void InitSystem() {
    InitLib();
    InstallCom1(BAUD_RATE, 8, 0, 1);
    DelayMs(500);
    ClearCom1();
    ClearTxBuffer1();
    Disable5DigitLed();
    LedOff();
}

void CheckModem() {
    char buf[128];

    printCom1("AT\r");
    DelayMs(500);

    if (DataSizeInCom1() > 0) {
        memset(buf, 0, sizeof(buf));
        ReadCom1n(buf, sizeof(buf) - 1);
        Print("Modem Response: %s\n", buf);
    }
    else {
        ShowError(ERR_SHOW_MODEM_FAIL);
        Print("No response from WM-300V\n");
    }
}

int ReadPDU(char* outBuf, int maxLen) {
    int len;
    if (DataSizeInCom1() == 0) return 0;
    len = ReadCom1n(outBuf, maxLen);
    if (len <= 0 || len >= maxLen) {
        ShowError(ERR_SHOW_INVALID_PDU);
        return 0;
    }
    outBuf[len] = '\0';
    return len;
}

void SendPDU(const char* hexStr, int hexLen) {
    int pduLen;

    printCom1("AT+CSCS=\"IRA\"\r");
    DelayMs(500);
    printCom1("AT+CMGF=0\r");
    DelayMs(500);
    printCom1("AT+CSMP=17,167,0,240\r");
    DelayMs(500);

    pduLen = hexLen / 2 - 1;
    if (pduLen <= 0) {
        ShowError(ERR_SHOW_SEND_FAIL);
        return;
    }

    printCom1("AT+CMGS=%d\r", pduLen);
    DelayMs(1000);
    if (ToCom1Bufn((char*)hexStr, hexLen) != hexLen) {
        ShowError(ERR_SHOW_SEND_FAIL);
        return;
    }
    ToCom1(0x1A);
    DelayMs(1000);
    Print("Sent PDU\n");
}

void SendSensorPDU() {
    unsigned char ud[42];
    char hexStr[85];
    float val;
    unsigned char* bytes;
    int idx;
    int i;

    idx = 0;
    ud[idx++] = 'T';

    for (i = 0; i < 8; i++) {
        val = sensor_values[i];
        bytes = (unsigned char*)&val;
        ud[idx++] = bytes[0];
        ud[idx++] = bytes[1];
        ud[idx++] = bytes[2];
        ud[idx++] = bytes[3];
        ud[idx++] = sensor_timeout[i];
    }
    ud[idx++] = 0x0D;

    for (i = 0; i < 42; i++) {
        sprintf(&hexStr[i * 2], "%02X", ud[i]);
    }

    SendPDU(hexStr, 84);
}

void SendOKPDUAndReboot() {
    SendPDU(RESPONSE_OK, strlen(RESPONSE_OK));
    DelayMs(1000);

    EnableWDT();
    while (1);
}

void Loop() {
    char rxBuf[512];
    int len;
    char ud[9];

    while (1) {
        DelayMs(1000);

        if (ReadPDU(rxBuf, sizeof(rxBuf) - 1)) {
            Print("Received PDU: %s\n", rxBuf);

            len = strlen(rxBuf);
            if (len < 8) {
                ShowError(ERR_SHOW_INVALID_PDU);
                continue;
            }

            memset(ud, 0, sizeof(ud));
            strncpy(ud, &rxBuf[len - 8], 8);

            if (strcmp(ud, PDU_UD_SENSOR) == 0) {
                SendSensorPDU();
            }
            else if (strcmp(ud, PDU_UD_OK) == 0) {
                SendOKPDUAndReboot();
            }
            else {
                ShowError(ERR_SHOW_INVALID_PDU);
                Print("Unknown UD: %s\n", ud);
            }
        }
    }
}

void Main() {
    InitSystem();
    CheckModem();
    Loop();
}
